=== tests/cases/compiler/acceptSymbolAsWeakType.ts ===
const s: symbol = Symbol('s');
>s : symbol
>Symbol('s') : unique symbol
>Symbol : SymbolConstructor
>'s' : "s"

const ws = new WeakSet([s]);
>ws : WeakSet<symbol>
>new WeakSet([s]) : WeakSet<symbol>
>WeakSet : WeakSetConstructor
>[s] : symbol[]
>s : symbol

ws.add(s);
>ws.add(s) : WeakSet<symbol>
>ws.add : (value: symbol) => WeakSet<symbol>
>ws : WeakSet<symbol>
>add : (value: symbol) => WeakSet<symbol>
>s : symbol

ws.has(s);
>ws.has(s) : boolean
>ws.has : (value: symbol) => boolean
>ws : WeakSet<symbol>
>has : (value: symbol) => boolean
>s : symbol

ws.delete(s);
>ws.delete(s) : boolean
>ws.delete : (value: symbol) => boolean
>ws : WeakSet<symbol>
>delete : (value: symbol) => boolean
>s : symbol

const wm = new WeakMap([[s, false]]);
>wm : WeakMap<symbol, boolean>
>new WeakMap([[s, false]]) : WeakMap<symbol, boolean>
>WeakMap : WeakMapConstructor
>[[s, false]] : [symbol, false][]
>[s, false] : [symbol, false]
>s : symbol
>false : false

wm.set(s, true);
>wm.set(s, true) : WeakMap<symbol, boolean>
>wm.set : (key: symbol, value: boolean) => WeakMap<symbol, boolean>
>wm : WeakMap<symbol, boolean>
>set : (key: symbol, value: boolean) => WeakMap<symbol, boolean>
>s : symbol
>true : true

wm.has(s);
>wm.has(s) : boolean
>wm.has : (key: symbol) => boolean
>wm : WeakMap<symbol, boolean>
>has : (key: symbol) => boolean
>s : symbol

wm.get(s);
>wm.get(s) : boolean
>wm.get : (key: symbol) => boolean
>wm : WeakMap<symbol, boolean>
>get : (key: symbol) => boolean
>s : symbol

wm.delete(s);
>wm.delete(s) : boolean
>wm.delete : (key: symbol) => boolean
>wm : WeakMap<symbol, boolean>
>delete : (key: symbol) => boolean
>s : symbol

const wr = new WeakRef(s);
>wr : WeakRef<symbol>
>new WeakRef(s) : WeakRef<symbol>
>WeakRef : WeakRefConstructor
>s : symbol

wr.deref();
>wr.deref() : symbol
>wr.deref : () => symbol
>wr : WeakRef<symbol>
>deref : () => symbol

const f = new FinalizationRegistry<symbol>(() => {});
>f : FinalizationRegistry<symbol>
>new FinalizationRegistry<symbol>(() => {}) : FinalizationRegistry<symbol>
>FinalizationRegistry : FinalizationRegistryConstructor
>() => {} : () => void

f.registerSymbol(s, null);
>f.registerSymbol(s, null) : any
>f.registerSymbol : any
>f : FinalizationRegistry<symbol>
>registerSymbol : any
>s : symbol
>null : null

f.unregisterSymbol(s);
>f.unregisterSymbol(s) : any
>f.unregisterSymbol : any
>f : FinalizationRegistry<symbol>
>unregisterSymbol : any
>s : symbol

